generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

model UncoveredInterest {
  id        String   @id @default(uuid())
  email     String
  name      String?
  zipCode   String
  createdAt DateTime @default(now())
}

model Address {
  id         String   @id
  street     String
  city       String
  state      String
  zipCode    String
  customerId String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  customer   Customer @relation("CustomerToAddress", fields: [customerId], references: [id])

  @@index([customerId])
}

model Cache {
  id        String   @id
  key       String   @unique
  value     Json
  expiresAt DateTime
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime

  @@index([expiresAt])
  @@index([key])
  @@index([tags])
}

model ChatMessage {
  id         String   @id
  senderId   String
  receiverId String
  content    String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@index([receiverId])
  @@index([senderId])
}

model CleanupTask {
  id           String    @id
  taskType     String
  status       String
  scheduledFor DateTime
  targetId     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime
  completedAt  DateTime?
  notes        String?
}

model CoveragePriority {
  zipCode   String   @id
  createdAt DateTime @default(now())
}

model CoverageArea {
  id             String   @id
  zipCode        String   @db.VarChar(5)
  employeeId     String
  active         Boolean  @default(true)
  travelDistance Int      @default(20)
  createdAt      DateTime @default(now())
  updatedAt      DateTime
  Employee       Employee @relation("EmployeeToServiceAreas", fields: [employeeId], references: [id])

  @@index([employeeId])
  @@index([zipCode])
}

model Customer {
  id                String    @id
  userId            String    @unique
  subscriptionId    String?   @unique
  createdAt         DateTime  @default(now())
  updatedAt         DateTime
  stripeCustomerId  String?   @unique
  gateCode          String?
  phone             String?
  serviceDay        String?
  cashAppName       String?
  referralCode      String?   @unique
  creditsDepletedAt DateTime?
  referrerId        String?
  referredId        String?
  serviceCredits    Int       @default(0)
  address           Address?  @relation("CustomerToAddress")
  User              User      @relation("UserToCustomer", fields: [userId], references: [id])
  services          Service[] @relation("ServiceToCustomer")
  feedback          CustomerFeedback[] @relation("CustomerToFeedback")

  @@index([subscriptionId])
}

model Earning {
  id               String    @id
  amount           Float
  status           String    @default("PENDING")
  serviceId        String
  employeeId       String
  paidVia          String?
  paidAt           DateTime?
  approvedAt       DateTime?
  approvedBy       String?
  stripeTransferId String?   @unique
  errorMessage     String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime

  @@index([employeeId])
  @@index([serviceId])
  @@index([status])
}

model Employee {
  id                     String         @id
  userId                 String         @unique
  phone                  String?
  cashAppUsername        String?
  stripeAccountId        String?        @unique
  bio                    String?
  availability           Json?
  rating                 Float?
  completedJobs          Int            @default(0)
  createdAt              DateTime       @default(now())
  updatedAt              DateTime
  averageRating          Float?
  preferredPaymentMethod PaymentMethod?
  status                 EmployeeStatus @default(ACTIVE)
  hasSetServiceArea      Boolean        @default(false)
  stripeAccountStatus    String?        @default("PENDING")
  stripeConnectAccountId String?        @unique
  serviceAreas           CoverageArea[] @relation("EmployeeToServiceAreas")
  User                   User           @relation("UserToEmployee", fields: [userId], references: [id])
  payouts                Payout[]       @relation("EmployeeToPayouts")
  services               Service[]      @relation("ServiceToEmployee")
  qualityControl         QualityControl[] @relation("EmployeeToQualityControl")
  routeOptimizations     RouteOptimization[] @relation("EmployeeToRouteOptimization")
}

model Location {
  id        String   @id
  serviceId String   @unique
  latitude  Float
  longitude Float
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime
  service   Service  @relation("ServiceToLocation", fields: [serviceId], references: [id])
}

model Notification {
  id        String   @id
  userId    String
  type      String
  title     String
  message   String
  read      Boolean  @default(false)
  metadata  Json?
  createdAt DateTime @default(now())

  @@index([userId])
}

model Payment {
  id                    String         @id
  amount                Float
  stripeFee             Float?
  netAmount             Float?
  type                  String
  serviceId             String?
  employeeId            String?
  customerId            String?
  referredId            String?
  paidAt                DateTime?
  approvedAt            DateTime?
  approvedBy            String?
  notes                 String?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime
  subscriptionId        String?
  stripePaymentIntentId String?
  stripeInvoiceId       String?
  stripeTransferId      String?
  refundedAmount        Float?
  refundedAt            DateTime?
  refundedBy            String?
  refundReason          String?
  refundTransactionId   String?
  batchId               String?
  status                PaymentStatus  @default(PENDING)
  paymentMethod         PaymentMethod?
  refundStatus          RefundStatus?
  service               Service?       @relation("ServiceToPayments", fields: [serviceId], references: [id])

  @@index([batchId])
  @@index([customerId])
  @@index([employeeId])
  @@index([referredId])
  @@index([serviceId])
  @@index([status])
  @@index([subscriptionId])
}

model Payout {
  id            String    @id @default(uuid())
  employeeId    String
  amount        Float
  fees          Float     @default(0)
  netAmount     Float
  status        String    @default("PENDING")
  paymentMethod String
  serviceCount  Int       @default(0)
  requestedAt   DateTime  @default(now())
  processedAt   DateTime?
  transactionId String?
  failureReason String?
  weekStart     DateTime?
  weekEnd       DateTime?
  isSameDay     Boolean   @default(false)
  employee      Employee  @relation("EmployeeToPayouts", fields: [employeeId], references: [id])

  @@index([employeeId])
  @@index([status])
  @@index([requestedAt])
}

model PaymentAuditLog {
  id          String   @id
  paymentId   String
  eventType   String
  details     String
  performedBy String
  timestamp   DateTime @default(now())

  @@index([eventType])
  @@index([paymentId])
  @@index([performedBy])
  @@index([timestamp])
}

model PaymentBatch {
  id                  String             @id
  name                String
  description         String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime
  createdById         String
  processingStartedAt DateTime?
  completedAt         DateTime?
  notes               String?
  status              PaymentBatchStatus
}

model PaymentReconciliationItem {
  id           String  @id
  reportId     String
  paymentId    String?
  stripeId     String?
  systemAmount Float?
  stripeAmount Float?
  matchStatus  String
  notes        String

  @@index([matchStatus])
  @@index([paymentId])
  @@index([reportId])
}

model PaymentReconciliationReport {
  id                     String   @id
  timestamp              DateTime @default(now())
  totalRecords           Int
  matchedCount           Int
  mismatchCount          Int
  missingFromStripeCount Int
  missingFromSystemCount Int

  @@index([timestamp])
}

model PaymentRetry {
  id                    String    @id
  paymentId             String
  status                String
  retryCount            Int       @default(0)
  nextRetryDate         DateTime
  errorMessage          String?
  scheduledDate         DateTime  @default(now())
  processedDate         DateTime?
  stripePaymentIntentId String?

  @@index([nextRetryDate])
  @@index([paymentId])
  @@index([status])
}

model RateLimit {
  id        String   @id
  key       String   @unique
  count     Int      @default(1)
  resetTime DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime

  @@index([key])
  @@index([resetTime])
}

model Referral {
  id             String          @id @default(uuid())
  referrerId     String
  referredId     String?
  code           String          @unique
  status         String          @default("PENDING")
  payoutAmount   Float?
  payoutStatus   String?         @default("PENDING")
  payoutDate     DateTime?
  payoutMethod   String?
  type           String
  notes          String?
  payoutBatchId  String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime
  ReferralPayout ReferralPayout? @relation(fields: [payoutBatchId], references: [id])

  @@index([code])
  @@index([referredId])
  @@index([referrerId])
  @@index([status])
}

model ReferralPayout {
  id          String     @id @default(uuid())
  payoutDate  DateTime   @default(now())
  method      String
  status      String
  totalAmount Float
  notes       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime
  referrals   Referral[]
}

model ServiceArea {
  id        String    @id @default(uuid())
  name      String
  zipCodes  String[]
  active    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  services  Service[] @relation("ServiceToArea")
  scoopers  User[]    @relation("ScooperServiceAreas")
}

model BusinessPartner {
  id               String               @id @default(uuid())
  businessName     String
  contactFirstName String
  contactLastName  String
  phone            String
  email            String
  payoutMethod     BusinessPayoutMethod
  stripeAccountId  String?
  cashAppUsername  String?
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  referralCodes    ReferralCode[]
}

model ReferralCode {
  id                String           @id
  code              String           @unique
  type              String
  status            String
  customerId        String?
  employeeId        String?
  partnerId         String?
  businessPartnerId String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime
  expiresAt         DateTime?
  businessPartner   BusinessPartner? @relation(fields: [businessPartnerId], references: [id])
  referralPartner   ReferralPartner? @relation(fields: [partnerId], references: [id])

  @@index([code])
  @@index([customerId])
  @@index([employeeId])
  @@index([partnerId])
  @@index([businessPartnerId])
}

model ReferralPartner {
  id            String         @id
  name          String
  contactEmail  String?
  paymentMethod String?
  paymentInfo   Json?
  notes         String?
  active        Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime
  ReferralCode  ReferralCode[]
}

model RefreshToken {
  id                String   @id
  token             String   @unique
  userId            String
  expiresAt         DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime
  deviceFingerprint String?
  isRevoked         Boolean  @default(false)
  User              User     @relation(fields: [userId], references: [id])

  @@index([token])
  @@index([userId])
}

model Service {
  id                 String            @id
  customerId         String
  scheduledDate      DateTime
  completedDate      DateTime?
  servicePlanId      String
  employeeId         String?
  serviceAreaId      String?
  potentialEarnings  Float?
  stripeFees         Float?
  netAmount          Float?
  paymentStatus      String            @default("PENDING")
  paymentApprovedAt  DateTime?
  paymentApprovedBy  String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime
  status             ServiceStatus     @default(SCHEDULED)
  workflowStatus     String            @default("AVAILABLE")
  arrivedAt          DateTime?
  checklistCompleted Boolean           @default(false)
  beforePhotoIds     String[]
  afterPhotoIds      String[]
  gatePhotoId        String?
  notes              String?
  rated              Boolean           @default(false)
  location           Location?         @relation("ServiceToLocation")
  payments           Payment[]         @relation("ServiceToPayments")
  customer           Customer          @relation("ServiceToCustomer", fields: [customerId], references: [id])
  employee           Employee?         @relation("ServiceToEmployee", fields: [employeeId], references: [id])
  serviceArea        ServiceArea?      @relation("ServiceToArea", fields: [serviceAreaId], references: [id])
  servicePlan        ServicePlan       @relation("ServiceToPlan", fields: [servicePlanId], references: [id])
  checklist          ServiceChecklist? @relation("ServiceToChecklist")
  delays             ServiceDelay[]    @relation("ServiceToDelays")
  photos             ServicePhoto[]    @relation("ServiceToPhotos")
  rating             ServiceRating?    @relation("ServiceToRating")
  timeExtensions     TimeExtension[]   @relation("ServiceToExtensions")
  qualityControl     QualityControl[] @relation("ServiceToQualityControl")
  feedback           CustomerFeedback[] @relation("ServiceToFeedback")

  @@index([customerId])
  @@index([employeeId])
  @@index([paymentStatus])
  @@index([serviceAreaId])
}

model ServiceChecklist {
  id          String    @id
  serviceId   String    @unique
  items       Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  completedAt DateTime?
  notes       String?
  service     Service   @relation("ServiceToChecklist", fields: [serviceId], references: [id])
}

model ServiceDelay {
  id           String   @id
  serviceId    String
  reason       String
  type         String
  reportedAt   DateTime @default(now())
  reportedById String
  service      Service  @relation("ServiceToDelays", fields: [serviceId], references: [id])

  @@index([reportedById])
  @@index([serviceId])
}

model ServiceMessage {
  id         String   @id
  serviceId  String
  employeeId String
  message    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime

  @@index([employeeId])
  @@index([serviceId])
}

model ServicePhoto {
  id        String    @id
  url       String
  type      PhotoType
  serviceId String
  createdAt DateTime  @default(now())
  updatedAt DateTime
  expiresAt DateTime?
  service   Service   @relation("ServiceToPhotos", fields: [serviceId], references: [id])
}

model ServicePlan {
  id          String    @id
  name        String
  description String?
  price       Float
  duration    Int
  type        String
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  services    Service[] @relation("ServiceToPlan")
}

model ServiceRating {
  id         String   @id
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  serviceId  String   @unique
  customerId String
  employeeId String
  service    Service  @relation("ServiceToRating", fields: [serviceId], references: [id])

  @@index([customerId])
  @@index([employeeId])
}

model Subscription {
  id         String             @id
  customerId String
  planId     String
  startDate  DateTime
  endDate    DateTime?
  createdAt  DateTime           @default(now())
  updatedAt  DateTime
  status     SubscriptionStatus @default(ACTIVE)
}

model TimeExtension {
  id         String   @id
  serviceId  String
  employeeId String
  minutes    Int
  reason     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  service    Service  @relation("ServiceToExtensions", fields: [serviceId], references: [id])

  @@index([employeeId])
  @@index([serviceId])
}

model SystemLog {
  id        String   @id @default(uuid())
  type      String   // AUTOMATION_TRIGGER, ERROR, INFO, WARNING
  message   String
  data      Json?    // Additional data for the log entry
  createdAt DateTime @default(now())

  @@index([type])
  @@index([createdAt])
}

model User {
  id                      String         @id
  email                   String         @unique
  name                    String?
  password                String
  resetTokenExpiry        DateTime?      @db.Timestamp(6)
  image                   String?
  createdAt               DateTime?      @default(now()) @db.Timestamp(6)
  deviceFingerprint       String?
  emailVerified           Boolean?       @default(false)
  referredId              String?
  referrerId              String?
  resetToken              String?        @unique
  updatedAt               DateTime       @db.Timestamp(6)
  verificationToken       String?        @unique
  verificationTokenExpiry DateTime?      @db.Timestamp(6)
  role                    String
  customer                Customer?      @relation("UserToCustomer")
  employee                Employee?      @relation("UserToEmployee")
  RefreshToken            RefreshToken[]
  serviceAreas            ServiceArea[]  @relation("ScooperServiceAreas")

  @@index([role])
}

model EarningToPayment {
  A String
  B String

  @@unique([A, B], map: "_EarningToPayment_AB_unique")
  @@index([B], map: "_EarningToPayment_B_index")
  @@map("_EarningToPayment")
}

enum BusinessPayoutMethod {
  STRIPE
  CASH_APP
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum PaymentBatchStatus {
  DRAFT
  PROCESSING
  COMPLETED
  PARTIAL
  FAILED
}

enum PaymentMethod {
  CASH
  CASH_APP
  CHECK
  STRIPE
}

enum PaymentStatus {
  PENDING
  APPROVED
  PAID
  FAILED
}

enum PhotoType {
  BEFORE
  AFTER
  ISSUE
  OTHER
}

enum RefundStatus {
  PENDING
  COMPLETED
  FAILED
}

enum ServiceStatus {
  PENDING
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  SUSPENDED
}

enum UserRole {
  ADMIN
  CUSTOMER
  EMPLOYEE
  BUSINESS_PARTNER
}

// Operational Efficiency Models
model InventoryItem {
  id          Int      @id @default(autoincrement())
  name        String
  category    String
  quantity    Int      @default(0)
  minQuantity Int      @default(0)
  unit        String?
  cost        Float    @default(0)
  lastUpdated DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
  @@index([name])
}

model QualityControl {
  id             String   @id @default(uuid())
  serviceId      String
  employeeId     String
  photos         Json?    // Array of photo URLs
  notes          String?
  completionTime DateTime
  status         String   @default("PENDING") // PENDING, COMPLETED, FAILED
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  service        Service  @relation("ServiceToQualityControl", fields: [serviceId], references: [id])
  employee       Employee @relation("EmployeeToQualityControl", fields: [employeeId], references: [id])

  @@index([serviceId])
  @@index([employeeId])
  @@index([status])
}

model CustomerFeedback {
  id         String   @id @default(uuid())
  serviceId  String
  customerId String
  rating     Int      // 1-5 stars
  review     String?
  category   String   @default("GENERAL") // GENERAL, QUALITY, TIMELINESS, COMMUNICATION
  status     String   @default("ACTIVE") // ACTIVE, HIDDEN, DELETED
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  service    Service  @relation("ServiceToFeedback", fields: [serviceId], references: [id])
  customer   Customer @relation("CustomerToFeedback", fields: [customerId], references: [id])

  @@index([serviceId])
  @@index([customerId])
  @@index([rating])
  @@index([category])
}

model RouteOptimization {
  id             String   @id @default(uuid())
  employeeId     String
  date           DateTime
  services       Json     // Array of service IDs in optimized order
  totalDistance  Float
  estimatedTime  Int      // Minutes
  efficiency     Int      // Percentage
  createdAt      DateTime @default(now())
  
  employee       Employee @relation("EmployeeToRouteOptimization", fields: [employeeId], references: [id])

  @@index([employeeId])
  @@index([date])
}
