generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CUSTOMER
  EMPLOYEE
}

enum CustomerStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum SubscriptionStatus {
  ACTIVE
  PAUSED
  CANCELLED
}

enum Plan {
  WEEKLY
  BIWEEKLY
  MONTHLY
}

enum ServiceStatus {
  SCHEDULED
  CLAIMED
  ARRIVED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  EXPIRED
}

enum PhotoType {
  PRE_CLEAN
  POST_CLEAN
}

enum PaymentMethod {
  CARD
  CASH
  CHECK
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentRetryStatus {
  SCHEDULED
  COMPLETED
  FAILED
  CANCELLED
}

enum DelayType {
  WEATHER
  TRAFFIC
  EQUIPMENT
  OTHER
}

enum NotificationType {
  JOB_AVAILABLE
  JOB_CLAIMED
  SERVICE_COMPLETED
  PAYMENT_RECEIVED
  SUBSCRIPTION_RENEWED
  TIME_EXTENSION_NEEDED
  CHAT_MESSAGE
}

enum ReferralStatus {
  PENDING
  COMPLETED
  EXPIRED
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  name              String?
  password          String?
  role              UserRole  @default(CUSTOMER)
  emailVerified     Boolean   @default(false)
  verificationToken String?   @unique
  verificationTokenExpiry DateTime?
  resetToken        String?   @unique
  resetTokenExpiry  DateTime?
  image             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  customer          Customer?
  employee          Employee?
  refreshTokens     RefreshToken[]
  serviceDelays     ServiceDelay[]
  sentMessages      ChatMessage[] @relation("SentMessages")
  receivedMessages  ChatMessage[] @relation("ReceivedMessages")
  notifications     Notification[]
}

model Customer {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  email       String   @unique
  phone       String
  status      CustomerStatus @default(ACTIVE)
  gateCode    String?
  address     Address?
  subscription Subscription?
  services    Service[]
  serviceDay  ServiceDay?
  pauseStart  DateTime?
  pauseEnd    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  referralsGiven   Referral[] @relation("Referrer")
  referralsReceived Referral[] @relation("Referred")

  @@index([userId])
}

model Address {
  id         String   @id @default(cuid())
  street     String
  city       String
  state      String
  zipCode    String
  customerId String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customer   Customer @relation(fields: [customerId], references: [id])
}

model Subscription {
  id          String   @id @default(cuid())
  customerId  String   @unique
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  plan        Plan
  startDate   DateTime
  nextBilling DateTime
  status      SubscriptionStatus @default(ACTIVE)
  stripeSubscriptionId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  payments    Payment[]

  @@index([customerId])
}

model TimeExtension {
  id         String   @id @default(cuid())
  serviceId  String
  employeeId String
  minutes    Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  employee   Employee @relation(fields: [employeeId], references: [id])
  service    Service  @relation(fields: [serviceId], references: [id])
}

model Employee {
  id              String           @id @default(cuid())
  name            String
  email           String           @unique
  phone           String?
  userId          String?          @unique
  status          EmployeeStatus   @default(ACTIVE)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  user            User?            @relation(fields: [userId], references: [id])
  payments        Payment[]
  services        Service[]
  serviceAreas    ServiceArea[]
  serviceMessages ServiceMessage[]
  timeExtensions  TimeExtension[]
}

model Payment {
  id             String         @id @default(cuid())
  amount         Float
  status         PaymentStatus  @default(PENDING)
  method         PaymentMethod
  date           DateTime?
  subscriptionId String?
  serviceId      String?
  employeeId     String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  employee       Employee?      @relation(fields: [employeeId], references: [id])
  service        Service?       @relation(fields: [serviceId], references: [id])
  subscription   Subscription?  @relation(fields: [subscriptionId], references: [id])
  retries        PaymentRetry[]

  @@index([subscriptionId])
  @@index([serviceId])
  @@index([employeeId])
  @@index([status])
  @@index([date])
}

model ServicePhoto {
  id        String   @id @default(cuid())
  serviceId String
  url       String
  type      PhotoType
  createdAt DateTime @default(now())
  service   Service  @relation(fields: [serviceId], references: [id])

  @@index([serviceId])
}

model Service {
  id          String      @id @default(cuid())
  customerId  String
  employeeId  String?
  type        ServiceType
  status      ServiceStatus
  scheduledFor DateTime
  completedAt DateTime?
  amount      Decimal
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  customer    Customer    @relation(fields: [customerId], references: [id])
  employee    Employee?   @relation(fields: [employeeId], references: [id])
  photos      ServicePhoto[]
  claimedAt   DateTime?
  expiresAt   DateTime?
  checklist   ServiceChecklist?

  @@index([customerId])
  @@index([employeeId])
}

model ServiceChecklist {
  id              String   @id @default(cuid())
  serviceId       String   @unique
  gatesClosed     Boolean
  gatesLocked     Boolean
  gatesSecured    Boolean
  gatesChecked    Boolean
  gatesVerified   Boolean
  gatesConfirmed  Boolean
  gatesInspected  Boolean
  gatesValidated  Boolean
  gatesApproved   Boolean
  gatesCompleted  Boolean
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  service         Service  @relation(fields: [serviceId], references: [id])
}

model Location {
  id          String   @id @default(cuid())
  serviceId   String   @unique
  service     Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  latitude    Float
  longitude   Float
  createdAt   DateTime @default(now())
}

model ServiceMessage {
  id         String   @id @default(cuid())
  serviceId  String
  employeeId String
  message    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  employee   Employee @relation(fields: [employeeId], references: [id])
  service    Service  @relation(fields: [serviceId], references: [id])
}

model ServiceArea {
  id         String    @id @default(cuid())
  name       String
  employeeId String
  employee   Employee  @relation(fields: [employeeId], references: [id])
  services   Service[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([employeeId])
}

model PaymentRetry {
  id            String             @id @default(cuid())
  paymentId     String
  scheduledDate DateTime
  attemptNumber Int                @default(1)
  status        PaymentRetryStatus @default(SCHEDULED)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  payment       Payment            @relation(fields: [paymentId], references: [id])
}

model ServiceDelay {
  id           String    @id @default(cuid())
  serviceId    String
  reason       String
  type         DelayType
  reportedAt   DateTime  @default(now())
  reportedById String
  reportedBy   User      @relation(fields: [reportedById], references: [id])
  service      Service   @relation(fields: [serviceId], references: [id])

  @@index([serviceId])
  @@index([reportedById])
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        NotificationType
  title       String
  message     String
  read        Boolean  @default(false)
  metadata    Json?
  createdAt   DateTime @default(now())

  @@index([userId])
}

model ChatMessage {
  id          String   @id @default(cuid())
  senderId    String
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  receiverId  String
  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  content     String
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@index([senderId])
  @@index([receiverId])
}

model Referral {
  id          String   @id @default(cuid())
  referrerId  String
  referrer    Customer @relation("Referrer", fields: [referrerId], references: [id])
  referredId  String?
  referred    Customer? @relation("Referred", fields: [referredId], references: [id])
  code        String   @unique
  status      ReferralStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([referrerId])
  @@index([referredId])
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum ServiceDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum ServiceType {
  REGULAR
  ONE_TIME
}
