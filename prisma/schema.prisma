generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  output          = "./node_modules/@prisma/client"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

model Address {
  id         String   @id
  street     String
  city       String
  state      String
  zipCode    String
  customerId String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime

  @@index([customerId])
}

model Cache {
  id        String   @id
  key       String   @unique
  value     Json
  expiresAt DateTime
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime

  @@index([expiresAt])
  @@index([key])
  @@index([tags])
}

model ChatMessage {
  id         String   @id
  senderId   String
  receiverId String
  content    String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@index([receiverId])
  @@index([senderId])
}

model CleanupTask {
  id           String    @id
  taskType     String
  status       String
  scheduledFor DateTime
  targetId     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime
  completedAt  DateTime?
  notes        String?
}

model CoverageArea {
  id         String   @id
  zipCode    String
  employeeId String
  active     Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime

  @@index([employeeId])
  @@index([zipCode])
}

model Customer {
  id               String   @id
  userId           String   @unique
  subscriptionId   String?  @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime
  stripeCustomerId String?  @unique
  gateCode         String?
  phone            String?
  serviceDay       String?
  cashAppName      String?
  referralCode     String?  @unique
  referrerId       String?
  referredId       String?
  User             User     @relation("UserToCustomer", fields: [userId], references: [id])

  @@index([subscriptionId])
}

model Earning {
  id               String    @id
  amount           Float
  status           String    @default("PENDING")
  serviceId        String
  employeeId       String
  paidVia          String?
  paidAt           DateTime?
  approvedAt       DateTime?
  approvedBy       String?
  stripeTransferId String?   @unique
  errorMessage     String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime

  @@index([employeeId])
  @@index([serviceId])
  @@index([status])
}

model Employee {
  id                     String         @id
  userId                 String         @unique
  phone                  String?
  cashAppUsername        String?
  stripeAccountId        String?        @unique
  bio                    String?
  availability           Json?
  rating                 Float?
  completedJobs          Int            @default(0)
  createdAt              DateTime       @default(now())
  updatedAt              DateTime
  averageRating          Float?
  preferredPaymentMethod PaymentMethod?
  status                 EmployeeStatus @default(ACTIVE)
  hasSetServiceArea      Boolean        @default(false)
  User                   User           @relation("UserToEmployee", fields: [userId], references: [id])
}

model Location {
  id        String   @id
  serviceId String   @unique
  latitude  Float
  longitude Float
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model Notification {
  id        String   @id
  userId    String
  type      String
  title     String
  message   String
  read      Boolean  @default(false)
  metadata  Json?
  createdAt DateTime @default(now())

  @@index([userId])
}

model Payment {
  id                    String         @id
  amount                Float
  stripeFee             Float?
  netAmount             Float?
  type                  String
  serviceId             String?
  employeeId            String?
  customerId            String?
  referredId            String?
  paidAt                DateTime?
  approvedAt            DateTime?
  approvedBy            String?
  notes                 String?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime
  subscriptionId        String?
  stripePaymentIntentId String?
  stripeInvoiceId       String?
  stripeTransferId      String?
  refundedAmount        Float?
  refundedAt            DateTime?
  refundedBy            String?
  refundReason          String?
  refundTransactionId   String?
  batchId               String?
  status                PaymentStatus  @default(PENDING)
  paymentMethod         PaymentMethod?
  refundStatus          RefundStatus?

  @@index([batchId])
  @@index([customerId])
  @@index([employeeId])
  @@index([referredId])
  @@index([serviceId])
  @@index([status])
  @@index([subscriptionId])
}

model PaymentAuditLog {
  id          String   @id
  paymentId   String
  eventType   String
  details     String
  performedBy String
  timestamp   DateTime @default(now())

  @@index([eventType])
  @@index([paymentId])
  @@index([performedBy])
  @@index([timestamp])
}

model PaymentBatch {
  id                  String             @id
  name                String
  description         String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime
  createdById         String
  processingStartedAt DateTime?
  completedAt         DateTime?
  notes               String?
  status              PaymentBatchStatus
}

model PaymentReconciliationItem {
  id           String  @id
  reportId     String
  paymentId    String?
  stripeId     String?
  systemAmount Float?
  stripeAmount Float?
  matchStatus  String
  notes        String

  @@index([matchStatus])
  @@index([paymentId])
  @@index([reportId])
}

model PaymentReconciliationReport {
  id                     String   @id
  timestamp              DateTime @default(now())
  totalRecords           Int
  matchedCount           Int
  mismatchCount          Int
  missingFromStripeCount Int
  missingFromSystemCount Int

  @@index([timestamp])
}

model PaymentRetry {
  id                    String    @id
  paymentId             String
  status                String
  retryCount            Int       @default(0)
  nextRetryDate         DateTime
  errorMessage          String?
  scheduledDate         DateTime  @default(now())
  processedDate         DateTime?
  stripePaymentIntentId String?

  @@index([nextRetryDate])
  @@index([paymentId])
  @@index([status])
}

model RateLimit {
  id        String   @id
  key       String   @unique
  count     Int      @default(1)
  resetTime DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime

  @@index([key])
  @@index([resetTime])
}

model Referral {
  payoutAmount Float?
  payoutStatus String?   @default("PENDING")
  payoutDate   DateTime?
  id           String    @id
  referrerId   String
  referredId   String?
  code         String    @unique
  status       String    @default("PENDING")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime

  @@index([code])
  @@index([referredId])
  @@index([referrerId])
  @@index([status])
}

model ReferralCode {
  id              String           @id
  code            String           @unique
  type            String
  ownerId         String?
  partnerId       String?
  uses            Int              @default(0)
  maxUses         Int?
  totalEarned     Float            @default(0)
  active          Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime
  ReferralPartner ReferralPartner? @relation(fields: [partnerId], references: [id])
}

model ReferralPartner {
  id            String         @id
  name          String
  contactEmail  String?
  paymentMethod String?
  paymentInfo   Json?
  notes         String?
  active        Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime
  ReferralCode  ReferralCode[]
}

model RefreshToken {
  id                String   @id
  token             String   @unique
  userId            String
  expiresAt         DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime
  deviceFingerprint String?
  isRevoked         Boolean  @default(false)
  User              User     @relation(fields: [userId], references: [id])

  @@index([token])
  @@index([userId])
}

model Service {
  workflowStatus     String        @default("AVAILABLE")
  arrivedAt          DateTime?
  checklistCompleted Boolean       @default(false)
  beforePhotoIds     String[]
  afterPhotoIds      String[]
  gatePhotoId        String?
  id                 String        @id
  customerId         String
  scheduledDate      DateTime
  completedDate      DateTime?
  servicePlanId      String
  employeeId         String?
  serviceAreaId      String?
  potentialEarnings  Float?
  stripeFees         Float?
  netAmount          Float?
  paymentStatus      String        @default("PENDING")
  paymentApprovedAt  DateTime?
  paymentApprovedBy  String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime
  status             ServiceStatus @default(SCHEDULED)

  @@index([employeeId])
  @@index([paymentStatus])
  @@index([serviceAreaId])
}

model ServiceArea {
  id         String   @id
  employeeId String
  zipCode    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime
}

model ServiceChecklist {
  id          String    @id
  serviceId   String    @unique
  items       Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  completedAt DateTime?
  notes       String?
}

model ServiceDelay {
  id           String   @id
  serviceId    String
  reason       String
  type         String
  reportedAt   DateTime @default(now())
  reportedById String

  @@index([reportedById])
  @@index([serviceId])
}

model ServiceMessage {
  id         String   @id
  serviceId  String
  employeeId String
  message    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime

  @@index([employeeId])
  @@index([serviceId])
}

model ServicePhoto {
  id        String    @id
  url       String
  type      PhotoType
  serviceId String
  createdAt DateTime  @default(now())
  updatedAt DateTime
  expiresAt DateTime?
}

model ServicePlan {
  id          String   @id
  name        String
  description String?
  price       Float
  duration    Int
  type        String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
}

model ServiceRating {
  id         String   @id
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  serviceId  String   @unique
  customerId String
  employeeId String

  @@index([customerId])
  @@index([employeeId])
}

model Subscription {
  id         String             @id
  customerId String
  planId     String
  startDate  DateTime
  endDate    DateTime?
  createdAt  DateTime           @default(now())
  updatedAt  DateTime
  status     SubscriptionStatus @default(ACTIVE)
}

model TimeExtension {
  id         String   @id
  serviceId  String
  employeeId String
  minutes    Int
  reason     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime

  @@index([employeeId])
  @@index([serviceId])
}

model User {
  id                      String         @id
  email                   String         @unique
  name                    String?
  password                String
  resetTokenExpiry        DateTime?      @db.Timestamp(6)
  image                   String?
  createdAt               DateTime?      @default(now()) @db.Timestamp(6)
  deviceFingerprint       String?
  emailVerified           Boolean?       @default(false)
  referredId              String?
  referrerId              String?
  resetToken              String?        @unique
  updatedAt               DateTime       @db.Timestamp(6)
  verificationToken       String?        @unique
  verificationTokenExpiry DateTime?      @db.Timestamp(6)
  role                    String
  RefreshToken            RefreshToken[]
  customer                Customer?      @relation("UserToCustomer")
  employee                Employee?      @relation("UserToEmployee")
}

model EarningToPayment {
  A String
  B String

  @@unique([A, B], map: "_EarningToPayment_AB_unique")
  @@index([B], map: "_EarningToPayment_B_index")
  @@map("_EarningToPayment")
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum PaymentBatchStatus {
  DRAFT
  PROCESSING
  COMPLETED
  PARTIAL
  FAILED
}

enum PaymentMethod {
  CASH
  CASH_APP
  CHECK
  STRIPE
}

enum PaymentStatus {
  PENDING
  APPROVED
  PAID
  FAILED
}

enum PhotoType {
  BEFORE
  AFTER
  ISSUE
  OTHER
}

enum RefundStatus {
  PENDING
  COMPLETED
  FAILED
}

enum ServiceStatus {
  PENDING
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  SUSPENDED
}

enum UserRole {
  CUSTOMER
  EMPLOYEE
  ADMIN
  MANAGER
}
